from _typeshed import Incomplete
from ctranslate2.converters import utils as utils
from ctranslate2.converters.converter import Converter as Converter
from ctranslate2.specs import common_spec as common_spec, transformer_spec as transformer_spec
from typing import List

class MarianConverter(Converter):
    def __init__(self, model_path: str, vocab_paths: List[str]) -> None: ...

def load_vocab(path): ...
def set_transformer_spec(spec, weights) -> None: ...
def set_transformer_encoder(spec, weights, scope) -> None: ...
def set_transformer_decoder(spec, weights, scope) -> None: ...
def set_common_layers(spec, weights, scope) -> None: ...
def set_transformer_encoder_layer(spec, weights, scope) -> None: ...
def set_transformer_decoder_layer(spec, weights, scope) -> None: ...
def set_multi_head_attention(spec, weights, scope, self_attention: bool = ...) -> None: ...
def set_ffn(spec, weights, scope) -> None: ...
def set_layer_norm_auto(spec, weights, scope) -> None: ...
def set_layer_norm(spec, weights, scope, pre_norm: bool = ...) -> None: ...
def set_linear(spec, weights, scope, suffix: str = ..., reuse_weight: Incomplete | None = ...) -> None: ...
def set_embeddings(spec, weights, scope) -> None: ...
def set_position_encodings(spec, weights, dim: Incomplete | None = ...) -> None: ...
def main() -> None: ...
