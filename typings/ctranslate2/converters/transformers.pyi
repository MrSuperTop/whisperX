import abc
from typing import Optional

from _typeshed import Incomplete
from ctranslate2.converters import utils as utils
from ctranslate2.converters.converter import Converter as Converter
from ctranslate2.specs import (
    attention_spec as attention_spec,
)
from ctranslate2.specs import (
    common_spec as common_spec,
)
from ctranslate2.specs import (
    model_spec as model_spec,
)
from ctranslate2.specs import (
    transformer_spec as transformer_spec,
)
from ctranslate2.specs import (
    whisper_spec as whisper_spec,
)

def register_loader(config_name): ...

class TransformersConverter(Converter):
    def __init__(
        self,
        model_name_or_path: str,
        activation_scales: Optional[str] = ...,
        copy_files: Optional[list[str]] = ...,
        load_as_float16: bool = ...,
        revision: Optional[str] = ...,
        low_cpu_mem_usage: bool = ...,
        trust_remote_code: bool = ...,
    ) -> None: ...
    def load_model(self, model_class, model_name_or_path, **kwargs): ...
    def load_tokenizer(self, tokenizer_class, model_name_or_path, **kwargs): ...
    def get_model_file(self, filename): ...

class ModelLoader(abc.ABC, metaclass=abc.ABCMeta):
    @property
    def architecture_name(self) -> None: ...
    @abc.abstractmethod
    def get_model_spec(self, model): ...
    def __call__(self, model, tokenizer): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_layer_norm(self, spec, module) -> None: ...
    def set_linear(self, spec, module) -> None: ...
    def set_embeddings(self, spec, module) -> None: ...
    def set_position_encodings(self, spec, module) -> None: ...
    def smooth_activation(self, spec, activation_scales) -> None: ...

class BartLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_encoder(self, spec, encoder) -> None: ...
    def set_decoder(self, spec, decoder) -> None: ...
    def set_attention(self, spec, attention, self_attention: bool = ...) -> None: ...
    def set_common_layers(self, spec, module) -> None: ...

class MarianMTLoader(BartLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, decoder) -> None: ...
    def get_vocabulary(self, model, tokenizer): ...

class M2M100Loader(BartLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_position_encodings(self, spec, module) -> None: ...
    def get_vocabulary(self, model, tokenizer): ...

class MBartLoader(BartLoader):
    @property
    def architecture_name(self): ...
    def set_config(self, config, model, tokenizer) -> None: ...

class PegasusLoader(BartLoader):
    @property
    def architecture_name(self): ...
    def set_config(self, config, model, tokenizer) -> None: ...

class OPTLoader(BartLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def smooth_activation(self, spec, activation_scales) -> None: ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, decoder) -> None: ...
    def set_common_layers(self, spec, module) -> None: ...
    def get_vocabulary(self, model, tokenizer): ...

class GPTBigCodeMHALoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...

class GPT2Loader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...

class GPTJLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module, rotary_dim, num_heads) -> None: ...

class CodeGenLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(
        self, spec, module, rotary_dim, num_heads, embed_dim, mp_num
    ) -> None: ...

class GPTNeoXLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module, num_heads) -> None: ...

class WhisperLoader(BartLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_encoder(self, spec, encoder) -> None: ...
    def set_decoder(self, spec, decoder) -> None: ...
    def set_common_layers(self, spec, module) -> None: ...
    def set_conv1d(self, spec, module) -> None: ...

class T5Loader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_stack(self, spec, module, is_decoder: bool = ...) -> None: ...
    def set_ffn(self, spec, module) -> None: ...
    def set_self_attention(self, spec, module) -> None: ...
    def set_cross_attention(self, spec, module) -> None: ...
    def set_attention(self, spec, attention, self_attention: bool = ...) -> None: ...
    def set_layer_norm(self, spec, layer_norm) -> None: ...

class MT5Loader(T5Loader):
    @property
    def architecture_name(self): ...

class BloomLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...
    def set_qkv_linear(self, spec, module, num_heads) -> None: ...

class MPTLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...
    def set_layer_norm(self, spec, module) -> None: ...

class LlamaLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_layer_norm(self, spec, layer_norm) -> None: ...
    def set_decoder(self, spec, module) -> None: ...

class MixFormerSequentialLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...

class RWLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_falcon_spec(self, model) -> None: ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_decoder(self, spec, module) -> None: ...
    def set_qkv_linear(
        self, spec, module, num_heads, num_kv: Incomplete | None = ...
    ) -> None: ...

class FalconLoader(RWLoader):
    def get_falcon_spec(self, model) -> None: ...

class DistilBertLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...

class BertLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def get_vocabulary(self, model, tokenizer): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...

class XLMRobertaLoader(ModelLoader):
    @property
    def architecture_name(self): ...
    def get_model_spec(self, model): ...
    def set_vocabulary(self, spec, tokens) -> None: ...
    def set_config(self, config, model, tokenizer) -> None: ...
    def set_position_encodings(self, spec, module) -> None: ...

def main() -> None: ...
