from _typeshed import Incomplete
from collections.abc import Generator
from torchmetrics import Metric as Metric
from typing import Dict, Sequence, Union

class SupervisedRepresentationLearningTaskMixin:
    @property
    def num_classes_per_batch(self) -> int: ...
    @property
    def num_chunks_per_class(self) -> int: ...
    @property
    def batch_size(self) -> int: ...
    specifications: Incomplete
    def setup(self) -> None: ...
    def default_metric(self) -> Union[Metric, Sequence[Metric], Dict[str, Metric]]: ...
    def train__iter__(self) -> Generator[Incomplete, None, None]: ...
    def train__len__(self): ...
    def collate_fn(self, batch, stage: str = ...): ...
    def training_step(self, batch, batch_idx: int): ...
    def val__getitem__(self, idx): ...
    def val__len__(self): ...
    def validation_step(self, batch, batch_idx: int): ...
