import random
import torch
from _typeshed import Incomplete
from collections.abc import Generator
from torchmetrics import Metric as Metric
from typing import Dict, Sequence, Union

Subsets: Incomplete
Scopes: Incomplete

class SegmentationTaskMixin:
    def get_file(self, file_id): ...
    classes: Incomplete
    metadata: Incomplete
    audios: Incomplete
    audio_infos: Incomplete
    audio_encodings: Incomplete
    annotated_duration: Incomplete
    annotated_regions: Incomplete
    annotated_classes: Incomplete
    annotations: Incomplete
    metadata_unique_values: Incomplete
    validation_chunks: Incomplete
    def setup(self) -> None: ...
    def default_metric(self) -> Union[Metric, Sequence[Metric], Dict[str, Metric]]: ...
    def train__iter__helper(self, rng: random.Random, **filters): ...
    def train__iter__(self) -> Generator[Incomplete, None, None]: ...
    def collate_X(self, batch) -> torch.Tensor: ...
    def collate_y(self, batch) -> torch.Tensor: ...
    def collate_meta(self, batch) -> torch.Tensor: ...
    def collate_fn(self, batch, stage: str = ...): ...
    def train__len__(self): ...
    def val__getitem__(self, idx): ...
    def val__len__(self): ...
    def validation_step(self, batch, batch_idx: int): ...
