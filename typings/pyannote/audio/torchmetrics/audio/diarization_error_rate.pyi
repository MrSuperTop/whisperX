from typing import Optional

import torch
from _typeshed import Incomplete
from torchmetrics import Metric

class DiarizationErrorRate(Metric):
    higher_is_better: bool
    is_differentiable: bool
    threshold: Incomplete
    def __init__(self, threshold: float = ...) -> None: ...
    def update(self, preds: torch.Tensor, target: torch.Tensor) -> None: ...
    def compute(self): ...

class SpeakerConfusionRate(DiarizationErrorRate):
    def compute(self): ...

class FalseAlarmRate(DiarizationErrorRate):
    def compute(self): ...

class MissedDetectionRate(DiarizationErrorRate):
    def compute(self): ...

class OptimalDiarizationErrorRate(Metric):
    higher_is_better: bool
    is_differentiable: bool
    def __init__(self, threshold: Optional[torch.Tensor] = ...) -> None: ...
    def update(self, preds: torch.Tensor, target: torch.Tensor) -> None: ...
    def compute(self): ...

class OptimalDiarizationErrorRateThreshold(OptimalDiarizationErrorRate):
    def compute(self): ...

class OptimalSpeakerConfusionRate(OptimalDiarizationErrorRate):
    def compute(self): ...

class OptimalFalseAlarmRate(OptimalDiarizationErrorRate):
    def compute(self): ...

class OptimalMissedDetectionRate(OptimalDiarizationErrorRate):
    def compute(self): ...
