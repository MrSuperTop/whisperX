import numpy as np
import networkx as nx
import torch
from pyannote.core import SlidingWindowFeature as SlidingWindowFeature
from typing import Callable, List, Optional, Tuple

def permutate(y1, y2, cost_func: Optional[Callable] = ..., return_cost: bool = ...): ...
def mse_cost_func(Y, y, **kwargs): ...
def mae_cost_func(Y, y, **kwargs): ...
def permutate_torch(y1: torch.Tensor, y2: torch.Tensor, cost_func: Optional[Callable] = ..., return_cost: bool = ...) -> Tuple[torch.Tensor, List[Tuple[int]]]: ...
def permutate_numpy(y1: np.ndarray, y2: np.ndarray, cost_func: Optional[Callable] = ..., return_cost: bool = ...) -> Tuple[np.ndarray, List[Tuple[int]]]: ...
def build_permutation_graph(segmentations: SlidingWindowFeature, onset: float = ..., cost_func: Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = ...) -> nx.Graph: ...
