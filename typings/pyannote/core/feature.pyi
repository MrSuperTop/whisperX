from typing import Iterator, Optional, Union

import numpy as np
from _typeshed import Incomplete
from pyannote.core.utils.types import Alignment as Alignment

from .segment import Segment as Segment
from .segment import SlidingWindow as SlidingWindow
from .timeline import Timeline as Timeline

class SlidingWindowFeature(np.lib.mixins.NDArrayOperatorsMixin):
    sliding_window: Incomplete
    data: Incomplete
    labels: Incomplete
    def __init__(
        self, data: np.ndarray, sliding_window: SlidingWindow, labels: list[str] = ...
    ) -> None: ...
    def __len__(self) -> int: ...
    @property
    def extent(self): ...
    @property
    def dimension(self): ...
    def getNumber(self): ...
    def getDimension(self): ...
    def getExtent(self): ...
    def __getitem__(self, i: int) -> np.ndarray: ...
    def __iter__(self): ...
    def __next__(self) -> tuple[Segment, np.ndarray]: ...
    def next(self): ...
    def iterfeatures(
        self, window: Optional[bool] = ...
    ) -> Iterator[Union[tuple[np.ndarray, Segment], np.ndarray]]: ...
    def crop(
        self,
        focus: Union[Segment, Timeline],
        mode: Alignment = ...,
        fixed: Optional[float] = ...,
        return_data: bool = ...,
    ) -> Union[np.ndarray, SlidingWindowFeature]: ...
    def __array__(self) -> np.ndarray: ...
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs): ...
    def align(self, to: SlidingWindowFeature) -> SlidingWindowFeature: ...
