from typing import Iterable

import numpy as np
from _typeshed import Incomplete

from .annotation import Annotation as Annotation
from .feature import SlidingWindowFeature as SlidingWindowFeature
from .segment import Segment as Segment
from .segment import SlidingWindow as SlidingWindow
from .timeline import Timeline as Timeline
from .utils.types import Label as Label
from .utils.types import LabelStyle as LabelStyle
from .utils.types import Resource as Resource

MATPLOTLIB_IS_AVAILABLE: bool
MATPLOTLIB_WARNING: str

class Notebook:
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    @property
    def crop(self): ...
    @property
    def width(self): ...
    def __getitem__(self, label: Label) -> LabelStyle: ...
    def setup(
        self, ax: Incomplete | None = ..., ylim=..., yaxis: bool = ..., time: bool = ...
    ): ...
    def draw_segment(
        self,
        ax,
        segment: Segment,
        y,
        label: Incomplete | None = ...,
        boundaries: bool = ...,
    ): ...
    def get_y(self, segments: Iterable[Segment]) -> np.ndarray: ...
    def __call__(self, resource: Resource, time: bool = ..., legend: bool = ...): ...
    def plot_segment(
        self, segment, ax: Incomplete | None = ..., time: bool = ...
    ) -> None: ...
    def plot_timeline(
        self, timeline: Timeline, ax: Incomplete | None = ..., time: bool = ...
    ): ...
    def plot_annotation(
        self,
        annotation: Annotation,
        ax: Incomplete | None = ...,
        time: bool = ...,
        legend: bool = ...,
    ): ...
    def plot_feature(
        self,
        feature: SlidingWindowFeature,
        ax: Incomplete | None = ...,
        time: bool = ...,
        ylim: Incomplete | None = ...,
    ): ...

notebook: Incomplete

def repr_segment(segment: Segment): ...
def repr_timeline(timeline: Timeline): ...
def repr_annotation(annotation: Annotation): ...
def repr_feature(feature: SlidingWindowFeature): ...
