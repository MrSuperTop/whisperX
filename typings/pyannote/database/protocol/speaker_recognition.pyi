from collections.abc import Generator

from _typeshed import Incomplete

from .protocol import Protocol as Protocol

class SpeakerRecognitionProtocol(Protocol):
    def trn_iter(self) -> None: ...
    def trn_enroll_iter(self) -> None: ...
    def trn_test_iter(self) -> None: ...
    def trn_keys(self) -> None: ...
    def dev_enroll_iter(self) -> None: ...
    def dev_test_iter(self) -> None: ...
    def dev_keys(self) -> None: ...
    def tst_enroll_iter(self) -> None: ...
    def tst_test_iter(self) -> None: ...
    def tst_keys(self) -> None: ...
    def train(self, yield_name: bool = ...) -> Generator[Incomplete, None, None]: ...
    def train_enroll(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def train_test(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def train_keys(self): ...
    def development_enroll(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def development_test(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def development_keys(self): ...
    def test_enroll(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def test_test(
        self, yield_name: bool = ...
    ) -> Generator[Incomplete, None, None]: ...
    def test_keys(self): ...
