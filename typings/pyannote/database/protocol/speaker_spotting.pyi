from collections.abc import Generator

from _typeshed import Incomplete

from .speaker_diarization import (
    SpeakerDiarizationProtocol as SpeakerDiarizationProtocol,
)

class SpeakerSpottingProtocol(SpeakerDiarizationProtocol):
    def trn_iter(self) -> None: ...
    def trn_enrol_iter(self) -> None: ...
    def trn_try_iter(self) -> None: ...
    def dev_iter(self) -> None: ...
    def dev_enrol_iter(self) -> None: ...
    def dev_try_iter(self) -> None: ...
    def tst_iter(self) -> None: ...
    def tst_enrol_iter(self) -> None: ...
    def tst_try_iter(self) -> None: ...
    def train_enrolment(self) -> Generator[Incomplete, None, None]: ...
    def train_trial(self) -> Generator[Incomplete, None, None]: ...
    def development_enrolment(self) -> Generator[Incomplete, None, None]: ...
    def development_trial(self) -> Generator[Incomplete, None, None]: ...
    def test_enrolment(self) -> Generator[Incomplete, None, None]: ...
    def test_trial(self) -> Generator[Incomplete, None, None]: ...
