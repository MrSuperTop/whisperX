import numpy as np
from .types import CalibrationMethod as CalibrationMethod
from _typeshed import Incomplete
from numpy.typing import ArrayLike as ArrayLike
from sklearn.base import BaseEstimator
from typing import Tuple

def det_curve(y_true: ArrayLike, scores: ArrayLike, distances: bool = ...) -> Tuple[np.ndarray, np.ndarray, np.ndarray, float]: ...
def precision_recall_curve(y_true: ArrayLike, scores: ArrayLike, distances: bool = ...) -> Tuple[np.ndarray, np.ndarray, np.ndarray, float]: ...

class _Passthrough(BaseEstimator):
    classes_: Incomplete
    def __init__(self) -> None: ...
    def fit(self, scores, y_true): ...
    def decision_function(self, scores: ArrayLike): ...

class Calibration:
    method: Incomplete
    equal_priors: Incomplete
    def __init__(self, equal_priors: bool = ..., method: CalibrationMethod = ...) -> None: ...
    calibration_: Incomplete
    def fit(self, scores: ArrayLike, y_true: ArrayLike): ...
    def transform(self, scores: ArrayLike): ...
