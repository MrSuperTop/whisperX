from collections.abc import Mapping
from typing import Any, Iterable

from _typeshed import Incomplete
from optuna.trial import Trial as Trial

from .pipeline import Pipeline as Pipeline

class Parameter: ...

class Categorical(Parameter):
    choices: Incomplete
    def __init__(self, choices: Iterable) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class DiscreteUniform(Parameter):
    low: Incomplete
    high: Incomplete
    q: Incomplete
    def __init__(self, low: float, high: float, q: float) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class Integer(Parameter):
    low: Incomplete
    high: Incomplete
    def __init__(self, low: int, high: int) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class LogUniform(Parameter):
    low: Incomplete
    high: Incomplete
    def __init__(self, low: float, high: float) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class Uniform(Parameter):
    low: Incomplete
    high: Incomplete
    def __init__(self, low: float, high: float) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class Frozen(Parameter):
    value: Incomplete
    def __init__(self, value: Any) -> None: ...
    def __call__(self, name: str, trial: Trial): ...

class ParamDict(Pipeline, Mapping):
    def __init__(self, **params) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __getitem__(self, param_name): ...
