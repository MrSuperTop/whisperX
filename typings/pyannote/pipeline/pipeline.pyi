from pathlib import Path
from typing import Any, Optional, TextIO, Union

from optuna.trial import Trial as Trial
from pyannote.core import Annotation, Timeline

from .typing import Direction as Direction
from .typing import PipelineInput as PipelineInput
from .typing import PipelineOutput as PipelineOutput

class Pipeline:
    def __init__(self) -> None: ...
    @property
    def training(self): ...
    def __hash__(self): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...
    def parameters(
        self,
        trial: Optional[Trial] = ...,
        frozen: Optional[bool] = ...,
        instantiated: Optional[bool] = ...,
    ) -> dict: ...
    def initialize(self) -> None: ...
    def freeze(self, params: dict) -> Pipeline: ...
    def instantiate(self, params: dict[Any, Any]) -> Pipeline: ...
    @property
    def instantiated(self): ...
    def dump_params(
        self,
        params_yml: Path,
        params: Optional[dict] = ...,
        loss: Optional[float] = ...,
    ) -> str: ...
    def load_params(self, params_yml: Path) -> Pipeline: ...
    def __call__(self, input: PipelineInput) -> PipelineOutput: ...
    def get_metric(self) -> pyannote.metrics.base.BaseMetric: ...
    def get_direction(self) -> Direction: ...
    def loss(self, input: PipelineInput, output: PipelineOutput) -> float: ...
    @property
    def write_format(self): ...
    def write(self, file: TextIO, output: PipelineOutput): ...
    def write_rttm(self, file: TextIO, output: Union[Timeline, Annotation]): ...
    def write_txt(self, file: TextIO, output: Union[Timeline, Annotation]): ...
